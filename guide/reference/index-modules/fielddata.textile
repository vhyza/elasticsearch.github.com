---
layout: guide
title: Field data
cat: guide
sidebar: reference_index_modules
---

p. The field data cache is used mainly when sorting on or faceting on a field. It loads all the field values to memory in order to provide fast document based access to those values. The field data cache can be expensive to build for a field, so its recommended to have enough memory to allocate it, and to keep it loaded.

From version 0.90 onwards, the amount of memory used for the field data
cache can be controlled using @indices.fielddata.cache.size@. Note: reloading
the field data which does not fit into your cache will be expensive and
perform poorly.

|_. Setting |_. Description |
|@indices.fielddata.cache.size@|The max size of the field data cache, eg @30%@ of node heap space, or an absolute value, eg @12GB@. Defaults to unbounded.|
|@indices.fielddata.cache.expire@|A time based setting that expires field data after a certain time of inactivity. Defaults to @-1@. For example, can be set to @5m@ for a 5 minute expiry.|

h2. Filtering fielddata

p. It is possible to control which field values are loaded into memory, which is particularly useful for string fields. When specifying the "mapping":/guide/reference/mapping/core-types.html for a field, you can also specify a fielddata filter.  

p. Fielddata filters can be changed using the "PUT mapping":/guide/reference/api/admin-indices-put-mapping.html API. After changing the filters, use the "Clear Cache":/guide/reference/api/admin-indices-clearcache.html API to reload the fielddata using the new filters.

h3. Filtering by frequency:

The frequency filter allows you to only load terms whose frequency falls between a @min@ and @max@ value, which can be expressed an absolute number or as a percentage (eg @0.01@ is @1%@). Frequency is calculated *per segment*. Percentages are based on the number of docs which have a value for the field, as opposed to all docs in the segment.

Small segments can be excluded completely by specifying the minimum number of docs that the segment should contain with @min_segment_size@:

<pre class="prettyprint lang-js">
{
    tag: {
        type:      "string",
        fielddata: {
            filter: {
                frequency: {
                    min:              0.001,
                    max:              0.1,
                    min_segment_size: 500
                }
            }
        }
    }
}
</pre>

h3. Filtering by regex

Terms can also be filtered by regular expression - only values which match the regular expression are loaded. Note: the regular expression is applied to each term in the field, not to the whole field value. For instance, to only load hashtags from a tweet, we can use a regular expression which matches terms beginning with @#@:

<pre class="prettyprint lang-js">
{
    tweet: {
        type:      "string",
        analyzer:  "whitespace"
        fielddata: {
            filter: {
                regex: {
                    pattern: "^#.*"
                }
            }
        }
    }
}
</pre>

h3. Combining filters

The @frequency@ and @regex@ filters can be combined:

<pre class="prettyprint lang-js">
{
    tweet: {
        type:      "string",
        analyzer:  "whitespace"
        fielddata: {
            filter: {
                regex: {
                    pattern: "^#.*"
                },
                frequency: {
                    min:              0.001,
                    max:              0.1,
                    min_segment_size: 500
                }
            }
        }
    }
}
</pre>



h2. Settings before v0.90

|_. Setting |_. Description |
|@index.cache.field.type@|The default type for the field data cache is @resident@ (because of the cost of rebuilding it). Other types include @soft@|
|@index.cache.field.max_size@|The max size (count, not byte size) of the cache (per search segment in a shard). Defaults to not set (@-1@).|
|@index.cache.field.expire@|A time based setting that expires filters after a certain time of inactivity. Defaults to @-1@. For example, can be set to @5m@ for a 5 minute expiry.|

h2. Monitoring field data

You can monitor memory usage for field data using "Nodes Stats API":/guide/reference/api/admin-cluster-nodes-stats/

